{"version":3,"sources":["MemoryGame.js"],"names":["MemoryGame","suits","newSuits","mixSuits","memory","document","getElementById","winText","firstCard","secondCard","hasFlippedCard","lockBoard","countTries","countPairs","_that","flipCard","classList","add","matchCard","sort","Math","random","map","i","card","createElement","img_front","img_back","className","addEventListener","id","name","prepend","src","setTimeout","remove","reset","disableCards","unflipCard","removeEventListener","win","innerHTML","ends","count","txt","q","createCards"],"mappings":"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","file":"MemoryGame.bb3a8e26.map","sourceRoot":"..\\src","sourcesContent":["\r\nclass MemoryGame {\r\n  constructor() {\r\n    this.suits = ['0001', '0002', '0003', '0004', '0005', '0006',\r\n      '0007', '0008', '0001', '0002', '0003', '0004', '0005', '0006',\r\n      '0007', '0008',]\r\n    this.newSuits = this.mixSuits(this.suits);\r\n    this.memory = document.getElementById('memory');\r\n    this.winText = document.getElementById('winText');\r\n    this.firstCard = null;\r\n    this.secondCard = null;\r\n    this.hasFlippedCard = false;\r\n    this.lockBoard = false;\r\n    this.countTries = 0;\r\n    this.countPairs = 0;\r\n    const _that = this;\r\n    this.flipCard = function () {\r\n      if (_that.lockBoard) return;\r\n      if (this === _that.firstCard) return;\r\n      this.classList.add('flip');\r\n            \r\n      if (_that.hasFlippedCard == false) {\r\n        _that.hasFlippedCard = true;\r\n        _that.firstCard = this;\r\n        return;\r\n      }\r\n      _that.secondCard = this;\r\n      _that.matchCard();\r\n    }\r\n}\r\n\r\nmixSuits(suits) {\r\n  return suits.sort(() => { return .5 - Math.random() });\r\n}\r\ncreateCards() {\r\n  this.newSuits.map((newSuits, i) => {\r\n    let card = document.createElement('div');\r\n    let img_front = document.createElement('img');\r\n    let img_back = document.createElement('img');\r\n    card.className = 'card';\r\n    card.addEventListener('click', this.flipCard);\r\n    card.id = (`${i}`);\r\n    card.name = `${newSuits}`;\r\n    memory.prepend(card);\r\n    img_back.className = 'back';\r\n    img_back.src = `https://raw.githubusercontent.com/Boardonly/images/master/images/${newSuits}.jpg`;\r\n    img_front.className = 'front';\r\n    img_front.src = `https://raw.githubusercontent.com/Boardonly/images/master/images/back.jpg`;\r\n    card.prepend(img_back, img_front);\r\n  })\r\n}\r\n\r\n// flipCard () {\r\n//   if (this.lockBoard) return;\r\n//   if (this === this.firstCard) return;\r\n//   this.classList.add('flip');\r\n//   console.log(this);\r\n  \r\n//   if (this.hasFlippedCard == false) {\r\n//     this.hasFlippedCard = true;\r\n//     this.firstCard = this;\r\n//     console.log(this.firstCard);\r\n//     return;\r\n//   }\r\n//   this.secondCard = this;\r\n//   console.log(this.secondCard, 2);\r\n//   () => matchCard();\r\n// }\r\n\r\n\r\nunflipCard() {\r\n  this.lockBoard = true;\r\n  setTimeout(() => {\r\n    this.firstCard.classList.remove('flip');\r\n    this.secondCard.classList.remove('flip');\r\n    this.reset();\r\n  }, 750);\r\n}\r\n\r\nmatchCard() {\r\n  this.countTries += 1;\r\n  if (this.firstCard.name === this.secondCard.name) {\r\n    this.disableCards()\r\n  } else {\r\n    this.unflipCard();\r\n  }\r\n}\r\n\r\ndisableCards() {\r\n  this.firstCard.removeEventListener('click', this.flipCard);\r\n  this.secondCard.removeEventListener('click', this.flipCard);\r\n  this.countPairs += 1;\r\n  this.win()\r\n  this.reset();\r\n}\r\n\r\nreset() {\r\n  this.hasFlippedCard = false;\r\n  this.lockBoard = false;\r\n  this.firstCard = null;\r\n  this.secondCard = null;\r\n}\r\n\r\nwin() {\r\n  if (this.countPairs === 8) {\r\n    this.winText.innerHTML = `Ура. Это Победа за ${this.countTries} ${this.ends()}!!!`;\r\n  }\r\n}\r\nends() {\r\n  let count = this.countTries % 100;\r\n  if (count >= 5 && count <= 20) {\r\n    this.txt = 'ходов';\r\n  } else {\r\n    count = count % 10;\r\n    if (count == 1) {\r\n      this.txt = 'ход';\r\n    } else if (count >= 2 && count <= 4) {\r\n      this.txt = 'хода';\r\n    }\r\n  }\r\n  return this.txt;\r\n}\r\n}\r\n\r\nlet q = new MemoryGame();\r\nq.createCards();\r\n"]}